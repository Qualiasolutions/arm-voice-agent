name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality and Testing
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Environment validation
      run: node scripts/validate-env.js development
      env:
        NODE_ENV: test
        VAPI_API_KEY: ${{ secrets.VAPI_API_KEY || 'test-key' }}
        VAPI_SERVER_SECRET: ${{ secrets.VAPI_SERVER_SECRET || 'test-secret' }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test-service-key' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-openai-key' }}
        DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || 'test-deepgram-key' }}
        UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL || 'https://test.upstash.io' }}
        UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN || 'test-token' }}

    - name: Lint code
      run: npm run lint

    - name: Type check
      run: npm run type-check

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        VAPI_SERVER_SECRET: test-secret
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_ROLE_KEY: test-service-key
        OPENAI_API_KEY: test-openai-key
        UPSTASH_REDIS_REST_URL: https://test.upstash.io
        UPSTASH_REDIS_REST_TOKEN: test-token

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: coverage-report
        path: coverage/

  # Security Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      run: npx audit-ci --config audit-ci.json
      continue-on-error: true

  # Deploy to Vercel (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Deploy to Vercel
      run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Run post-deployment health check
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/api/vapi/health || exit 1

  # Deploy to Vercel (Preview)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    environment: preview

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Deploy to Vercel (Preview)
      id: vercel-deploy
      run: |
        URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
        echo "preview-url=$URL" >> $GITHUB_OUTPUT
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Preview deployment ready!**
            
            ðŸ”— **Preview URL:** ${{ steps.vercel-deploy.outputs.preview-url }}
            
            ðŸ“Š **Health Check:** ${{ steps.vercel-deploy.outputs.preview-url }}/api/vapi/health
            
            This preview will be automatically updated with new commits.`
          })

    - name: Run preview health check
      run: |
        sleep 30
        curl -f ${{ steps.vercel-deploy.outputs.preview-url }}/api/vapi/health || exit 1